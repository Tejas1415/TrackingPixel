Advanced Image Tracking System - Deployment Guide

This guide explains how to deploy the enhanced image tracking system with multiple tracking methods. Follow these steps to set up the system on your server.

## Local Development Setup

### Step 1: Install Required Software
First, make sure you have Node.js installed (version 14 or later). Then set up your project:

```bash
# Create project directory
mkdir tracking-system
cd tracking-system

# Initialize project
npm init -y

# Install dependencies
npm install express multer uuid path fs 
```

### Step 2: Install Additional Dependencies
```bash
# Install geolocation and IP address handling packages
npm install geoip-lite ipaddr.js
```

### Step 3: Create Directories
```bash
mkdir uploads
mkdir public
```

### Step 4: Create Server File
Create a file named `server.js` in the root directory and copy the server code provided.

### Step 5: Create Client Interface
Copy the `index.html` file to the `public` directory.

### Step 6: Start the Server Locally
```bash
node server.js
```

You should see: "Server running on http://localhost:5050"

## Production Deployment

### Method 1: Basic VPS/Dedicated Server

1. **Set Up a VPS** with a provider like DigitalOcean, Linode, AWS EC2, etc.

2. **Install Node.js and npm**:
   ```bash
   sudo apt update
   sudo apt install nodejs npm
   ```

3. **Set up a process manager** (for keeping your app running):
   ```bash
   sudo npm install -g pm2
   ```

4. **Deploy your code**:
   ```bash
   # Clone or copy your code to the server
   git clone your-repository-url
   # Or upload files via SFTP
   
   # Install dependencies
   cd tracking-system
   npm install express multer uuid path fs geoip-lite ipaddr.js
   
   # Start with PM2
   pm2 start server.js --name "tracking-system"
   pm2 save
   pm2 startup
   ```

5. **Set up a reverse proxy** with Nginx:
   ```bash
   sudo apt install nginx
   ```

   Create a configuration file:
   ```bash
   sudo nano /etc/nginx/sites-available/tracking-system
   ```

   Add this configuration:
   ```
   server {
       listen 80;
       server_name your-domain.com www.your-domain.com;
       
       location / {
           proxy_pass http://localhost:5050;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection 'upgrade';
           proxy_set_header Host $host;
           proxy_cache_bypass $http_upgrade;
       }
   }
   ```

   Enable the site:
   ```bash
   sudo ln -s /etc/nginx/sites-available/tracking-system /etc/nginx/sites-enabled/
   sudo nginx -t
   sudo systemctl restart nginx
   ```

6. **Set up SSL** with Let's Encrypt:
   ```bash
   sudo apt install certbot python3-certbot-nginx
   sudo certbot --nginx -d your-domain.com -d www.your-domain.com
   ```

### Method 2: Heroku Deployment

1. **Create a Heroku account** at heroku.com

2. **Install the Heroku CLI**:
   ```bash
   npm install -g heroku
   ```

3. **Prepare your app for Heroku**:
   Add a `Procfile` in your project root:
   ```
   web: node server.js
   ```

   Update your server.js to use Heroku's PORT:
   ```javascript
   const port = process.env.PORT || 5050;
   ```

4. **Deploy to Heroku**:
   ```bash
   # Login to Heroku
   heroku login
   
   # Create a Heroku app
   heroku create your-app-name
   
   # Push your code
   git push heroku main
   
   # Open your app
   heroku open
   ```

## Advanced Configuration

### 1. Enable Geolocation API

The application already includes built-in geolocation capabilities using:

1. **geoip-lite**: For fast local lookups (less accurate but no API limits)
2. **ipinfo.io API integration**: For more accurate results (requires API key)

To enhance the geolocation with a commercial API:

```javascript
// Find this code in server.js and update the API key
try {
  const response = await fetch(`https://ipinfo.io/${ip}/json?token=YOUR_TOKEN_HERE`);
  const data = await response.json();
  return {
    country: data.country,
    city: data.city,
    region: data.region,
    timezone: data.timezone,
    loc: data.loc
  };
} catch (error) {
  console.error('Error getting IP geolocation:', error);
  return { country: 'Unknown', city: 'Unknown' };
}
```

The system has a fallback mechanism that will use the free geoip-lite database when the API is unavailable or rate-limited.

### 2. Set Up a Database (Optional)

For persistent storage instead of in-memory storage:

1. **Install MongoDB**:
   ```bash
   npm install mongodb mongoose
   ```

2. **Update server.js** to use MongoDB instead of in-memory storage.

3. **Add environmental variables** for your database connection:
   ```bash
   # For Heroku
   heroku config:set MONGODB_URI=your-mongodb-connection-string
   
   # For VPS
   echo "MONGODB_URI=your-mongodb-connection-string" > .env
   ```

### 3. Add Authentication (Recommended)

For production use, it's recommended to add authentication to protect your tracking dashboard. You can implement this with:

```bash
npm install passport passport-local express-session bcrypt
```

## Usage Notes

### Tracking Method Comparison

1. **Tracking URL**: 
   - Pros: Most reliable, works everywhere
   - Cons: Opens in a browser, obviously a link

2. **Email Tracking**:
   - Pros: Invisible tracking in emails
   - Cons: Many email clients block remote images

3. **Downloadable Tracking Images**:
   - Pros: Can be shared directly like regular images
   - Cons: Requires recipient to open the HTML file in a browser

### Important Considerations

- **Storage**: Uploaded images are stored in the `uploads` directory. For production, consider using cloud storage like AWS S3.

- **Memory Usage**: The tracking data is stored in memory by default. For production, implement database storage.

- **Security**: Always deploy with HTTPS enabled to protect data in transit.

- **Reliability**: Email clients and messaging platforms may cache images, affecting tracking accuracy.

- **Legal**: Respect privacy laws and ensure your use case complies with relevant regulations.